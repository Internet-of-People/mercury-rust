# Thanks to the following blog post we are caching cargo
# http://blog.wjlr.org.uk/2016/08/16/fast-rust-gitlab-ci.html

# This file is a template, and might need editing before it works on your project.
# Unofficial language image. Look for the different tagged releases at:
# https://hub.docker.com/r/scorpil/rust/tags/
# image: "scorpil/rust:stable"
image: "rust"

# Optional: Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ce/ci/docker/using_docker_images.html#what-is-a-service
services:
  - postgres:latest
#  - mysql:latest
#  - redis:latest

# Optional: Install a C compiler, cmake and git into the container.
# You will often need this when you (or any of your dependencies) depends on C code.
#before_script:
#- apt-get update -yqq
#- apt-get install -yqq --no-install-recommends build-essential


# To ensure that dependencies are cached correctly
variables:
  CARGO_HOME: $CI_PROJECT_DIR/cargo
  POSTGRES_DB: testdb
  POSTGRES_USER: testuser
  POSTGRES_PASSWORD: testpass

# Use cargo to test the project
test:cargo:
  script:
  - du -hs target || true
  - du -hs cargo || true
  - rustc --version && cargo --version      # Print version info for debugging
  # official way to provide password to psql: http://www.postgresql.org/docs/9.3/static/libpq-envars.html
  - export PGPASSWORD=$POSTGRES_PASSWORD
  - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f "test/testdb.sql"
  - time cargo test --verbose --jobs 1 --release # Don't paralize to make errors more readable
  cache:
    paths:
      - target/
      - cargo/
