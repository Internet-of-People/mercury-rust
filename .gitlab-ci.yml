image: "rust"

# Optional: Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ce/ci/docker/using_docker_images.html#what-is-a-service
services:
#  - postgres:alpine
#  - mysql:latest
#  - redis:latest

# Optional: Install a C compiler, cmake and git into the container.
# You will often need this when you (or any of your dependencies) depends on C code.
before_script:
  - apt-get update -yqq
  - apt-get install -yqq --no-install-recommends capnproto libfuse-dev

variables:
  # To ensure that dependencies are cached correctly
  CARGO_HOME: $CI_PROJECT_DIR/cargo

# Use cargo to test the project
test:cargo:
  script:
    - du -hs target || true
    - du -hs cargo || true
    - rustc --version && cargo --version      # Print version info for debugging
    - export RUST_BACKTRACE=1
    - time cargo build --all --all-targets --verbose --release # --all builds whole workspace, --all-targets builds bin,lib,examples,tests,benchmarks
    - time cargo test --all --verbose --jobs 1 --release || true # Don't parallelize to make errors more readable

  # Thanks to the following blog post we are caching cargo
  # http://blog.wjlr.org.uk/2016/08/16/fast-rust-gitlab-ci.html
  cache:
    paths:
      - target/
      - cargo/
