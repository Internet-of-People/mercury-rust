# Thanks to the following blog post we are caching cargo
# http://blog.wjlr.org.uk/2016/08/16/fast-rust-gitlab-ci.html

# This file is a template, and might need editing before it works on your project.
image: "rust"

# To ensure that dependencies are cached correctly
variables:
  CARGO_HOME: $CI_PROJECT_DIR/cargo

before_script:
  ##
  ## Install ssh-agent if not already installed, it is required by Docker.
  ## (change apt-get to yum if you use an RPM-based image)
  ##
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

  ##
  ## Run ssh-agent (inside the build environment)
  ##
  - eval $(ssh-agent -s)

  ##
  ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  ## We're using tr to fix line endings which makes ed25519 keys work
  ## without extra base64 encoding.
  ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
  ##
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null

  ##
  ## Create the SSH directory and give it the right permissions
  ##
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh

# Use cargo to test the project
test:cargo:
  script:
    - du -hs target || true
    - du -hs cargo || true
    - rustc --version && cargo --version      # Print version info for debugging
    - export RUST_BACKTRACE=1
    - time cargo build --all --all-targets --verbose --release # --all builds whole workspace, --all-targets builds bin,lib,examples,tests,benchmarks
    - time cargo test --all --verbose --jobs 1 --release # Don't parallelize to make errors more readable
  cache:
    paths:
      - target/
      - cargo/
